/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.List;
import java.util.Optional;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.openapitools.model.Error;
import org.openapitools.model.TicketPayload;
import org.openapitools.model.TicketRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-21T20:43:12.797Z[GMT]")

@Validated
@Api(value = "ticket", description = "the ticket API")
public interface TicketApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /ticket
     * Create a new Ticket Request
     *
     * @param ticketPayload Create a new TIcketRequest (required)
     * @return Ticket Request response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "addTicketRequest", notes = "Create a new Ticket Request", response = TicketRequest.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ticket Request response", response = TicketRequest.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/ticket",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TicketRequest> addTicketRequest(
            @ApiParam(value = "Create a new TIcketRequest", required = true) @Valid @RequestBody
                    TicketPayload ticketPayload);

    /**
     * DELETE /ticket/{id}
     * deletes a TicketRequest
     *
     * @param id ID to delete (required)
     * @param pin pin to of the ID to delete (required)
     * @return Ticket request deleted (status code 204)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "deletePet", notes = "deletes a TicketRequest", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Ticket request deleted"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/ticket/{id}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePet(
            @ApiParam(value = "ID to delete", required = true) @PathVariable("id") Long id,
            @ApiParam(value = "pin to of the ID to delete", required = true) @PathVariable("pin") Long pin) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ticket/findByPinAndHash
     * Returns all Ticket requests identified by the pin
     *
     * @param pin pin of user (required)
     * @param hash hashIdentityNumber of the user (required)
     * @return Ticket request response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "findTicketRequestsByPin", notes = "Returns all Ticket requests identified by the pin", response = TicketPayload.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Ticket request response", response = TicketPayload.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/ticket/findByPinAndHash",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<TicketPayload>> findTicketRequestsByPin(
            @ApiParam(value = "pin of user", required = true) @PathVariable("pin") Long pin,
            @ApiParam(value = "hashIdentityNumber of the user", required = true) @PathVariable("hash") String hash);


    /**
     * GET /ticket/{id}
     * Returns a user based on a single ID
     *
     * @param id ID of the ticket request (required)
     * @param pin Pin for the ID (required)
     * @return Ticket request response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "getTicketRequest", notes = "Returns a user based on a single ID", response = TicketRequest.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Ticket request response", response = TicketRequest.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/ticket/{id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<TicketRequest> getTicketRequest(
            @ApiParam(value = "ID of the ticket request", required = true) @PathVariable("id") Long id, @NotNull
    @ApiParam(value = "Pin for the ID", required = true) @Valid @RequestParam(value = "pin", required = true) Long pin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
