/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.LeaveRequest;
import org.openapitools.model.NewLeaveRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-21T14:31:13.518Z[GMT]")

@Validated
@Api(value = "leaverequest", description = "the leaverequest API")
public interface LeaverequestApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /leaverequest
     * Create a new Leave Request
     *
     * @param newLeaveRequest Create a new LeaveRequest (required)
     * @return Leave Request response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "addLeaveRequest", notes = "Create a new Leave Request", response = LeaveRequest.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Leave Request response", response = LeaveRequest.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/leaverequest",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<LeaveRequest> addLeaveRequest(@ApiParam(value = "Create a new LeaveRequest" ,required=true )  @Valid @RequestBody NewLeaveRequest newLeaveRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /leaverequest/{id}
     * deletes a LeaveRequest
     *
     * @param id ID to delete (required)
     * @param pin pin to of the ID to delete (required)
     * @return pet deleted (status code 204)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "deletePet", notes = "deletes a LeaveRequest", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "pet deleted"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/leaverequest/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePet(@ApiParam(value = "ID to delete",required=true) @PathVariable("id") Long id,@ApiParam(value = "pin to of the ID to delete",required=true) @PathVariable("pin") Long pin) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /leaverequest/findByPin
     * Returns all Leave requests identified by the pin
     *
     * @param pin pin of user (required)
     * @return Leave request response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "findLeaveRequestsByPin", notes = "Returns all Leave requests identified by the pin", response = LeaveRequest.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Leave request response", response = LeaveRequest.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/leaverequest/findByPin",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<LeaveRequest>> findLeaveRequestsByPin(@ApiParam(value = "pin of user",required=true) @PathVariable("pin") Long pin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /leaverequest/{id}
     * Returns a user based on a single ID
     *
     * @param id ID of the leave request (required)
     * @param pin Pin for the ID (required)
     * @return Leave request response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "getLeaveRequest", notes = "Returns a user based on a single ID", response = LeaveRequest.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Leave request response", response = LeaveRequest.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/leaverequest/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<LeaveRequest> getLeaveRequest(@ApiParam(value = "ID of the leave request",required=true) @PathVariable("id") Long id,@NotNull @ApiParam(value = "Pin for the ID", required = true) @Valid @RequestParam(value = "pin", required = true) Long pin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
